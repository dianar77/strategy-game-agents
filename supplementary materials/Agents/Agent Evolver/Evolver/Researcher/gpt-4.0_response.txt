================================ Human Message =================================

- **MEDIUM LEVEL GOAL:** Ensure compatibility between `foo_player.py` and `catanatron` by resolving errors related to incorrect attribute references. Focus on fixing critical runtime issues in game-phase determination and completing integration of phase-based prioritization logic.
- **LOW LEVEL GOAL:** Replace the invalid `turn_count` reference with a correct alternative to track game progress, enabling accurate game-phase determination.

- **CHOSEN AGENT:** RESEARCHER
- **AGENT OBJECTIVE:** Investigate the `State` object in the Catanatron framework and provide:
  1. The correct attribute(s) or method(s) (if any) in the `State` object that track the number of turns or allow inference of the game phase.
  2. Alternative approaches to determine the game phase if no direct turn-tracking attribute exists.
  3. Any additional context on how turn-related data can be accessed or estimated for gameplay decision-making.
In Node: RESEARCHER
================================ Human Message =================================

RESEARCH:

### 1. Correct Attributes or Methods to Track Turns in `State`
- The `State` class includes a field called `num_turns`, which stores the number of completed turns in the game.
  - **Definition Location**: `catanatron_core/catanatron/state.py`
  - **Purpose**: Tracks the current progress of the game in terms of turns.
  
    Example usage:
    ```python
    num_completed_turns = state.num_turns
    print(f"Number of completed turns: {num_completed_turns}")
    ```

- This attribute is updated after every completed action that ends a turn by the `advance_turn()` method:
  ```python
  def advance_turn(state, direction=1):
      next_index = next_player_index(state, direction)
      state.current_player_index = next_index
      state.current_turn_index = next_index
      state.num_turns += 1
  ```

- Additional turn-related attributes include:
  - `current_turn_index`: The index of the player whose turn it is (for sequential order).
  - `current_player_index`: The player currently taking an action (useful for interrupt-driven actions like discarding).

---

### 2. Alternative Approaches to Determine the Game Phase
If indirect methods or heuristics are required, the following can help infer the game phase:

- **Initial Build Phase Flag**: The attribute `is_initial_build_phase` (boolean) indicates whether the game is still in the settlement-building setup phase.
  ```python
  if state.is_initial_build_phase:
      print("The game is in the initial build phase.")
  ```

- **Action Log Analysis**:
  The `actions` attribute contains a complete log of actions taken by players. Analyzing the number or type of initial settlement and road-building actions can help infer the current phase.
  Example:
  ```python
  settlement_actions = [action for action in state.actions if action.action_type == ActionType.BUILD_SETTLEMENT]
  print(f"Number of settlements built: {len(settlement_actions)}")
  ```

- **Victory Points Check**:
  Player progress can be assessed using `VICTORY_POINTS` in `player_state` to estimate late-game scenarios:
  ```python
  key = player_key(state, player_color)
  victory_points = state.player_state[f"{key}_VICTORY_POINTS"]
  if victory_points >= 10:
      print("Game might be nearing its end.")
  ```

---

### 3. Turn-Related Data and Gameplay Decision-Making
The following attributes and methods are useful for gameplay and decision-making:

- **`playable_actions`:** Lists all valid actions for the current player at their game phase.
  ```python
  for action in state.playable_actions:
      print(action)
  ```

- **Game Phase Decision Points**:
  Use combinations of `num_turns`, `is_initial_build_phase`, and player actions logged in `state.actions` to make strategic decisions.

  Example for identifying early, mid, and late-game phases:
  ```python
  if state.is_initial_build_phase:
      print("Early game: Focus on settlements and roads.")
  elif state.num_turns < 50:
      print("Mid-game: Evaluate resource trades and expansion.")
  else:
      print("Late game: Focus on high-impact decisions.")
  ```

---

### Summary
1. Use **`num_turns`** for tracking chronological game progress.
2. Use **`is_initial_build_phase`** or evaluate **`actions`** for game-phase determination as an alternative.
3. Combine these attributes strategically to dynamically guide gameplay during various phases.
   
---

### Sources Consulted
1. `catanatron_core/catanatron/state.py`: Defines the `State` class and attributes like `num_turns`, `current_turn_index`, and `is_initial_build_phase`.
2. `catanatron_core/catanatron/state_functions.py`: Provides helper methods for player keys and resource/state management relevant to turn decisions.

END RESEARCH.